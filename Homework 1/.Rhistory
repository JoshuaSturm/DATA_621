predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb.ev$TARGET_WINS, predicted = predicted.wins))
results.df <- results.df %>%
mutate(error = results.df$predicted - results.df$actuals)
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) %>%
na.omit()
results.df
mean(results.df$error)
plot(model3)
View(results.df)
View(mb.ev)
View(mb.tr)
View(mb.ev)
colSums(is.na(mb.ev))
View(mb.ev)
View(mb3)
View(mb3)
mb.ev <- read.csv("moneyball-evaluation-data.csv")
names(mb.ev)
names(mb3)
diff(names(mb3), names(mb.ev))
setdiff(names(mb3), names(mb.ev))
names(mb.ev) <- gsub("TEAM_", "", names(mb.ev))
setdiff(names(mb3), names(mb.ev))
setdiff(names(mb.ev), names(mb3))
mb.ev <- mb.ev %>%
mutate(BATTING_1B = BATTING_H - BATTING_2B - BATTING_3B - BATTING_HR) %>%
select(-c(1, 2, 9, 10, 12, 16))
names(mb.ev)
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, warning = F, message = F, collapse = T)
# Chunk 2: load-packages
library(tidyverse)
library(knitr)
library(kableExtra)
library(ggplot2)
library(corrplot)
library(Hmisc)
# Chunk 3: load-data
mb.ev <- read.csv("moneyball-evaluation-data.csv")
mb.tr <- read.csv("moneyball-training-data.csv")
# Chunk 4: data-dictionary
defs <- c("Number of wins", "Base hits by batters (1B, 2B, 3B, HR)", "Doubles by batters (2B)", "Triples by batters (3B)",
"Homeruns by batters (4B)", "Walks by batters",  "Strikeouts by batter", "Stolen bases", "Caught stealing",
"Batters hit by pitch (free base)", "Hits allowed", "Homeruns allowed", "Walks allowed", "Strikeouts by pitchers",            "Errors", "Double plays")
mb.dict <- data.frame(names(mb.tr[,-1]), defs, "Outcome variable", stringsAsFactors = F)
mb.dict[c(2:6, 8, 10, 12, 14, 16), 3] <- "Positive impact on wins"
mb.dict[c(7, 9, 11, 13, 15), 3] <- "Negative impact on wins"
names(mb.dict) <- c("Variable Name", "Definition", "Theoretical effect")
kable(mb.dict, format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 5: prelim-exploration
#mb.tr <- mb.tr[, -c(1, 10, 11)] # Remove INDEX, BASERUN_CS, and BATTING_HBP columns
names(mb.tr) <- gsub("TEAM_", "", names(mb.tr)) # Shorten var names by removing common term 'TEAM_'
mb.desc <- psych::describe(mb.tr)
mb.desc <- mb.desc %>%
select(-c(vars, trimmed, mad, range)) # Remove irrelevant columns
kable(mb.desc, format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 6: summary-graph-boxplot
mb.tr.bp <- mb.tr %>%
gather()
summary.boxplot <- ggplot(mb.tr.bp, aes(x = key, y = value)) +
labs(x = "variable", title = "Moneyball Training Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
coord_flip()
summary.boxplot
# Chunk 7: summar-graph-hist
mb.tr.hist <- ggplot(data = mb.tr.bp, mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~key, scales = 'free_x')
mb.tr.hist
# Chunk 8: summary-correlation
mb.tr.corr <- mb.tr %>% na.omit()
corrplot(cor(mb.tr.corr), method = "color", type = "lower")
# Chunk 9: data-prep-one
mb2 <- mb.tr %>%
mutate(BATTING_1B = BATTING_H - BATTING_2B - BATTING_3B - BATTING_HR) %>%
select(-c(1, 3, 10, 11, 13, 17))
# Chunk 10: imputation
mb.imputed <- aregImpute(~ BATTING_SO + BASERUN_SB + PITCHING_SO, data = mb2, n.impute = 10, pr = F)
mb.imputed <- impute.transcan(mb.imputed, data=mb2, imputation=1, list.out=TRUE, pr=FALSE, check=FALSE)
mb.imputed <- as.data.frame(do.call(cbind, mb.imputed))
mb3 <- mb2 %>%
select(-6, 7, 10) %>%
mutate(BATTING_SO = mb.imputed[, 1],
BASERUN_SB = mb.imputed[, 2],
PITCHING_SO = mb.imputed[, 3])
# Chunk 11: mb3-range
mb3.range <- sapply(mb3, range)
kable(mb3.range, format = "latex", booktabs = T) %>%
kable_styling(latex_options =  c("striped", "scale_down"))
# Chunk 12: outliers
mb3 <- mb3 %>%
filter(., BASERUN_SB <= 581, PITCHING_H <= 1874, PITCHING_BB <= 859, PITCHING_SO <= 1614, FIELDING_E <= 854)
# Chunk 13: model-one
model1 <- lm(TARGET_WINS ~ ., data = mb.tr)
summary(model1)
# Chunk 14: model-two
model2 <- lm(TARGET_WINS ~ ., data = mb2)
summary(model2)
# Chunk 15: model-three
model3 <- lm(TARGET_WINS ~ ., data = mb3)
summary(model3)
names(mb.ev) <- gsub("TEAM_", "", names(mb.ev))
mb.ev <- mb.ev %>%
mutate(BATTING_1B = BATTING_H - BATTING_2B - BATTING_3B - BATTING_HR) %>%
select(-c(1, 2, 9, 10, 12, 16))
mb.imputed2 <- aregImpute(~ BATTING_SO + BASERUN_SB + PITCHING_SO, data = mb.ev, n.impute = 10, pr = F)
mb.imputed2 <- impute.transcan(mb.imputed, data=mb.ev, imputation=1, list.out=TRUE, pr=FALSE, check=FALSE)
mb.imputed2 <- as.data.frame(do.call(cbind, mb.imputed))
mb.ev <- mb.ev %>%
select(-5, -6, -9) %>%
mutate(BATTING_SO = mb.imputed2[, 1],
BASERUN_SB = mb.imputed2[, 2],
PITCHING_SO = mb.imputed2[, 3])
mb.ev <- mb.ev %>%
filter(., BASERUN_SB <= 581, PITCHING_H <= 1874, PITCHING_BB <= 859, PITCHING_SO <= 1614, FIELDING_E <= 854)
View(mb.ev)
colSums(is.na(mb.ev))
names(mb.ev) <- gsub("TEAM_", "", names(mb.ev))
mb.ev <- mb.ev %>%
mutate(BATTING_1B = BATTING_H - BATTING_2B - BATTING_3B - BATTING_HR) %>%
select(-c(1, 2, 9, 10, 12, 16))
mb.imputed2 <- aregImpute(~ BATTING_SO + BASERUN_SB + PITCHING_SO, data = mb.ev, n.impute = 10, pr = F)
mb.imputed2 <- impute.transcan(mb.imputed, data=mb.ev, imputation=1, list.out=TRUE, pr=FALSE, check=FALSE)
mb.imputed2 <- as.data.frame(do.call(cbind, mb.imputed))
mb.ev <- mb.ev %>%
select(-5, -6, -9) %>%
mutate(BATTING_SO = mb.imputed2[, 1],
BASERUN_SB = mb.imputed2[, 2],
PITCHING_SO = mb.imputed2[, 3])
mb.ev <- mb.ev %>%
filter(., BASERUN_SB <= 581, PITCHING_H <= 1874, PITCHING_BB <= 859, PITCHING_SO <= 1614, FIELDING_E <= 854)
names(mb.ev) <- gsub("TEAM_", "", names(mb.ev))
mb.ev <- mb.ev %>%
mutate(BATTING_1B = BATTING_H - BATTING_2B - BATTING_3B - BATTING_HR) %>%
select(-c(1, 2, 9, 10, 12, 16))
mb.imputed2 <- aregImpute(~ BATTING_SO + BASERUN_SB + PITCHING_SO, data = mb.ev, n.impute = 10, pr = F)
mb.imputed2 <- impute.transcan(mb.imputed, data=mb.ev, imputation=1, list.out=TRUE, pr=FALSE, check=FALSE)
mb.imputed2 <- as.data.frame(do.call(cbind, mb.imputed))
mb.ev <- mb.ev %>%
select(-5, -6, -9) %>%
mutate(BATTING_SO = mb.imputed2[, 1],
BASERUN_SB = mb.imputed2[, 2],
PITCHING_SO = mb.imputed2[, 3])
mb.ev <- mb.ev %>%
filter(., BASERUN_SB <= 581, PITCHING_H <= 1874, PITCHING_BB <= 859, PITCHING_SO <= 1614, FIELDING_E <= 854)
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb.ev$TARGET_WINS, predicted = predicted.wins))
results.df <- results.df %>%
mutate(error = results.df$predicted - results.df$actuals)
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) %>%
na.omit()
results.df
mean(results.df$error)
plot(model3)
mutate(error = results.df$predicted - results.df$actuals)
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) %>%
na.omit()
results.df
mean(results.df$error)
plot(model3)
View(results.df)
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS, predicted = predicted.wins))
results.df <- data.frame(cbind(actuals = mb.ev$TARGET_WINS, predicted = predicted.wins))
results.df <- data.frame(cbind(actuals = mb.ev$TARGET_WINS, predicted = predicted.wins))
results.df <- results.df %>%
mutate(error = results.df$predicted - results.df$actuals)
View(results.df)
?tidy
head(fortify(model3))
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb.ev$TARGET_WINS, predicted = predicted.wins))
results.df <- results.df %>%
mutate(error = results.df$predicted - results.df$actuals)
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) %>%
na.omit()
results.df
mean(results.df$error)
plot(model3)
mutate(error = results.df$predicted - results.df$actuals)
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) %>%
na.omit()
results.df
mean(results.df$error)
plot(model3)
mutate(error = as.numeric(results.df$predicted - results.df$actuals))
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) %>%
na.omit()
results.df
mean(results.df$error)
plot(model3)
typeof(results.df)
glimpse(results.df)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS, predicted = predicted.wins))
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb.ev$TARGET_WINS, predicted = predicted.wins))
View(results.df)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS, predicted = predicted.wins))
anova(model1, model2, model3)
anova(model2, model3)
anova(model1, model2)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS, predicted = predicted.wins))
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, warning = F, message = F, collapse = T)
# Chunk 2: load-packages
library(tidyverse)
library(knitr)
library(kableExtra)
library(ggplot2)
library(corrplot)
library(Hmisc)
# Chunk 3: load-data
mb.ev <- read.csv("moneyball-evaluation-data.csv")
mb.tr <- read.csv("moneyball-training-data.csv")
# Chunk 4: data-dictionary
defs <- c("Number of wins", "Base hits by batters (1B, 2B, 3B, HR)", "Doubles by batters (2B)", "Triples by batters (3B)",
"Homeruns by batters (4B)", "Walks by batters",  "Strikeouts by batter", "Stolen bases", "Caught stealing",
"Batters hit by pitch (free base)", "Hits allowed", "Homeruns allowed", "Walks allowed", "Strikeouts by pitchers",            "Errors", "Double plays")
mb.dict <- data.frame(names(mb.tr[,-1]), defs, "Outcome variable", stringsAsFactors = F)
mb.dict[c(2:6, 8, 10, 12, 14, 16), 3] <- "Positive impact on wins"
mb.dict[c(7, 9, 11, 13, 15), 3] <- "Negative impact on wins"
names(mb.dict) <- c("Variable Name", "Definition", "Theoretical effect")
kable(mb.dict, format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 5: prelim-exploration
#mb.tr <- mb.tr[, -c(1, 10, 11)] # Remove INDEX, BASERUN_CS, and BATTING_HBP columns
names(mb.tr) <- gsub("TEAM_", "", names(mb.tr)) # Shorten var names by removing common term 'TEAM_'
mb.desc <- psych::describe(mb.tr)
mb.desc <- mb.desc %>%
select(-c(vars, trimmed, mad, range)) # Remove irrelevant columns
kable(mb.desc, format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 6: summary-graph-boxplot
mb.tr.bp <- mb.tr %>%
gather()
summary.boxplot <- ggplot(mb.tr.bp, aes(x = key, y = value)) +
labs(x = "variable", title = "Moneyball Training Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
coord_flip()
summary.boxplot
# Chunk 7: summar-graph-hist
mb.tr.hist <- ggplot(data = mb.tr.bp, mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~key, scales = 'free_x')
mb.tr.hist
# Chunk 8: summary-correlation
mb.tr.corr <- mb.tr %>% na.omit()
corrplot(cor(mb.tr.corr), method = "color", type = "lower")
# Chunk 9: data-prep-one
mb2 <- mb.tr %>%
mutate(BATTING_1B = BATTING_H - BATTING_2B - BATTING_3B - BATTING_HR) %>%
select(-c(1, 3, 10, 11, 13, 17))
# Chunk 10: imputation
mb.imputed <- aregImpute(~ BATTING_SO + BASERUN_SB + PITCHING_SO, data = mb2, n.impute = 10, pr = F)
mb.imputed <- impute.transcan(mb.imputed, data=mb2, imputation=1, list.out=TRUE, pr=FALSE, check=FALSE)
mb.imputed <- as.data.frame(do.call(cbind, mb.imputed))
mb3 <- mb2 %>%
select(-6, 7, 10) %>%
mutate(BATTING_SO = mb.imputed[, 1],
BASERUN_SB = mb.imputed[, 2],
PITCHING_SO = mb.imputed[, 3])
# Chunk 11: mb3-range
mb3.range <- sapply(mb3, range)
kable(mb3.range, format = "latex", booktabs = T) %>%
kable_styling(latex_options =  c("striped", "scale_down"))
# Chunk 12: outliers
mb3 <- mb3 %>%
filter(., BASERUN_SB <= 581, PITCHING_H <= 1874, PITCHING_BB <= 859, PITCHING_SO <= 1614, FIELDING_E <= 854)
# Chunk 13: model-one
model1 <- lm(TARGET_WINS ~ ., data = mb.tr)
summary(model1)
# Chunk 14: model-two
model2 <- lm(TARGET_WINS ~ ., data = mb2)
summary(model2)
# Chunk 15: model-three
model3 <- lm(TARGET_WINS ~ ., data = mb3)
summary(model3)
# Chunk 16: clean-evaluation-data
names(mb.ev) <- gsub("TEAM_", "", names(mb.ev))
mb.ev <- mb.ev %>%
mutate(BATTING_1B = BATTING_H - BATTING_2B - BATTING_3B - BATTING_HR) %>%
select(-c(1, 2, 9, 10, 12, 16))
mb.imputed2 <- aregImpute(~ BATTING_SO + BASERUN_SB + PITCHING_SO, data = mb.ev, n.impute = 10, pr = F)
mb.imputed2 <- impute.transcan(mb.imputed2, data=mb.ev, imputation=1, list.out=TRUE, pr=FALSE, check=FALSE)
mb.imputed2 <- as.data.frame(do.call(cbind, mb.imputed2))
mb.ev <- mb.ev %>%
select(-5, -6, -9) %>%
mutate(BATTING_SO = mb.imputed2[, 1],
BASERUN_SB = mb.imputed2[, 2],
PITCHING_SO = mb.imputed2[, 3])
mb.ev <- mb.ev %>%
filter(., BASERUN_SB <= 581, PITCHING_H <= 1874, PITCHING_BB <= 859, PITCHING_SO <= 1614, FIELDING_E <= 854)
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS, predicted = predicted.wins))
results.df <- data.frame(cbind(actuals = mb.ev$TARGET_WINS, predicted = predicted.wins))
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb.ev$TARGET_WINS, predicted = predicted.wins))
results.df <- results.df %>%
mutate(error = results.df$predicted - results.df$actuals)
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) %>%
na.omit()
results.df
mean(results.df$error)
plot(model3)
summary(model3)
AIC(model3)
results.df <- data.frame(cbind(actuals = mb.ev$TARGET_WINS, predicted = predicted.wins))
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS, predicted = predicted.wins))
is.numeric(mb3$TARGET_WINS)
is.numeric(predicted.wins)
predicted.wins
length(mb3$TARGET_WINS)
View(predicted.wins)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS[1:227,], predicted = predicted.wins))
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS[1:226,], predicted = predicted.wins))
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS[1:228,], predicted = predicted.wins))
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS[1:228], predicted = predicted.wins))
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS[1:227], predicted = predicted.wins))
View(results.df)
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS[1:227], predicted = predicted.wins))
results.df <- results.df %>%
mutate(error = results.df$predicted - results.df$actuals)
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) %>%
na.omit()
results.df
mean(results.df$error)
plot(model3)
mean(apply(results.df, 1, min) / apply(results.df, 1, max))
mean(apply(results.df[,1:2], 1, min) / apply(results.df[,1:2], 1, max))
sprintf("The mean error is: ", %s, mean(results.df$error))
sprintf("The mean error is: %s", mean(results.df$error))
rp1 <- ggplot(model3, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE)
rp1
View(mb3)
rp7 <- ggplot(model3, aes(.hat, .cooksd)) +
geom_vline(xintercept = 0, colour = NA) +
geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") +
geom_smooth(se = FALSE) +
geom_point()
rp7
rp7 <- ggplot(model3, aes(.hat, .cooksd)) +
geom_vline(xintercept = 0, colour = NA) +
geom_abline(slope = seq(0, 10, by = 0.5), colour = "white") +
geom_smooth(se = FALSE) +
geom_point()
rp7
rp7 <- ggplot(model3, aes(.hat, .cooksd)) +
geom_vline(xintercept = 0, colour = NA) +
geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") +
geom_smooth(se = FALSE) +
geom_point()
rp7
plot(model3, which = 6)
rp7 <- ggplot(model3, aes(.hat, .cooksd)) +
geom_vline(xintercept = 0, colour = NA) +
geom_abline(slope = seq(0, 6, by = 0.5), colour = "white") +
geom_smooth(se = FALSE) +
geom_point()
rp7
rp7 <- ggplot(model3, aes(.hat, .cooksd)) +
geom_vline(xintercept = 0, colour = NA) +
geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") +
geom_smooth(se = FALSE) +
geom_point()
rp7
plot(model3, which = 6)
rp7
plot(model3, which = 6)
rp1 <- ggplot(model3, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(title = "Residuals vs Fitted")
rp1
rp3
rp3 <- ggplot(model2) +
stat_qq(aes(sample = .stdresid)) +
geom_abline()
rp3
plot(model3, which=6)
plot(model3, which=3)
plot(model3, which=2)
rp3
plot(model3, which=2)
rp3
plot(model3, which=2)
rp3
plot(model3, which=2)
rp3
plot(model3, which=2)
library(gridExtra)
library(gridExtra)
grid.arrange(rp1, rp2, rp3, rp4, rp5, rp6, rp7)
rp1 <- ggplot(model3, aes(.fitted, .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE) +
labs(title = "Residuals vs Fitted")
rp2 <- ggplot(model3, aes(.fitted, .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(se = FALSE)
rp3 <- plot(model3, which = 2)
rp4 <- ggplot(model3, aes(.fitted, sqrt(abs(.stdresid)))) +
geom_point() +
geom_smooth(se = FALSE) +
labs(title = "Scale-Location")
rp5 <- ggplot(model3, aes(seq_along(.cooksd), .cooksd)) +
geom_col() +
labs(title = "Cook's Distance")
rp6 <- ggplot(model3, aes(.hat, .stdresid)) +
geom_point(aes(size = .cooksd)) +
geom_smooth(se = FALSE, size = 0.5) +
labs(title = "Residuals vs Leverage")
rp7 <- ggplot(model3, aes(.hat, .cooksd)) +
geom_vline(xintercept = 0, colour = NA) +
geom_abline(slope = seq(0, 3, by = 0.5), colour = "white") +
geom_smooth(se = FALSE) +
geom_point() +
labs(title = "Cook's distance vs Leverage")
grid.arrange(rp1, rp2, rp3, rp4, rp5, rp6, rp7)
grid.arrange(rp1, rp2, rp3, rp4, rp5, rp6, rp7, ncol = 3)
grid.arrange(rp1, rp2, rp3, rp4, rp5, rp6, rp7, ncol = 3, top = "Plots")
grid.arrange(arrangeGrob(rp1, rp2, rp3, rp4, rp5, rp6, rp7, ncol = 3, main = "Plots"))
grid.arrange(rp1, rp3, rp4, rp5, rp6, rp7, ncol = 3)
grid.arrange(rp1, rp2, rp4, rp5, rp6, rp7, ncol = 3)
rp5 <- ggplot(model3, aes(seq_along(.cooksd), .cooksd)) +
geom_col(xlim(0.012)) +
labs(title = "Cook's Distance")
rp5 <- ggplot(model3, aes(seq_along(.cooksd), .cooksd)) +
geom_col() +
xlim(0.012) +
labs(title = "Cook's Distance")
rp5 <- ggplot(model3, aes(seq_along(.cooksd), .cooksd)) +
geom_col(ylim(0.012)) +
labs(title = "Cook's Distance")
rp5 <- ggplot(model3, aes(seq_along(.cooksd), .cooksd)) +
geom_col() +
ylim(0.012) +
labs(title = "Cook's Distance")
rp5 <- ggplot(model3, aes(seq_along(.cooksd), .cooksd)) +
geom_col() +
ylim(0, 0.012) +
labs(title = "Cook's Distance")
rp5
rp5 <- ggplot(model3, aes(seq_along(.cooksd), .cooksd)) +
geom_col() +
ylim(0, 0.0075) +
labs(title = "Cook's Distance")
rp5
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS, predicted = predicted.wins))
results.df <- results.df %>%
mutate(error = results.df$predicted - results.df$actuals)
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) #%>%
#na.omit()
results.df
# kable(mb3.range, format = "latex", booktabs = T) %>%
#   kable_styling(latex_options =  c("striped", "scale_down"))
View(results.df)
duplicated(results.df)
sum(duplicated(results.df) == True)
sum(duplicated(results.df) == TRUE)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS, predicted = predicted.wins))
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS, predicted = predicted.wins))
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS, predicted = predicted.wins))
results.df <- results.df %>%
mutate(error = results.df$predicted - results.df$actuals)
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) #%>%
#na.omit()
results.df
# kable(mb3.range, format = "latex", booktabs = T) %>%
#   kable_styling(latex_options =  c("striped", "scale_down"))
View(results.df)
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS[1:227], predicted = predicted.wins))
results.df <- results.df %>%
mutate(error = results.df$predicted - results.df$actuals)
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) #%>%
#na.omit()
results.df
# kable(mb3.range, format = "latex", booktabs = T) %>%
#   kable_styling(latex_options =  c("striped", "scale_down"))
View(results.df)
colSums(is.na(results.df))
predicted.wins <- predict(model3, mb.ev)
results.df <- data.frame(cbind(actuals = mb3$TARGET_WINS[1:227], predicted = predicted.wins))
results.df <- results.df %>%
mutate(error = results.df$predicted - results.df$actuals)
results.df <- results.df %>%
mutate(percerror = paste0(round(results.df$error/results.df$actuals*100,2),"%")) #%>%
#na.omit()
kable(head(results.df), format = "latex", booktabs = T) %>%
kable_styling(latex_options =  c("striped", "scale_down"))
