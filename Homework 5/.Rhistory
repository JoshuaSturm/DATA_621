View(data2)
k <- data2 %>% group_by(Incident.Zip, Priority)
hist(k)
k <- data2 %>% group_by(Incident.Zip, Priority) %>% hist()
k <- data2 %>% group_by(Incident.Zip, Priority) %>% hist(Complaint.Type)
k <- data2 %>% group_by(Incident.Zip, Priority) %>% hist(as.numeric(Complaint.Type))
k <- data2 %>% group_by(Incident.Zip, Priority) %>% plot(Complaint.Type)
k <- data2 %>% group_by(Incident.Zip, Priority) %>% plot(Complaint.Type)
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(Complaint.Type)
View(k)
names(k)
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(Complaint.Type)
k <- data2 %>% group_by(Incident.Zip, Priority, Complaint.Type) %>% barplot(Complaint.Type)
k <- data2 %>% group_by(Incident.Zip, Priority) %>% geom_bar()
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot()
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(count())
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(count(Complaint.Type))
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(count(Agency))
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(count(., Agency))
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(count(.))
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(count(., Borough))
barplot(k$Borough)
plot(k$Agency)
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(count(.$Borough))
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(count(k$Borough))
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(k$Borough)
k <- data2 %>% group_by(Incident.Zip, Priority) %>% barplot(k$Agency)
k <- data2 %>% group_by(Incident.Zip, Priority) %>% summarize(n = sum(n))
k <- data2 %>% group_by(Incident.Zip, Priority) %>% summarize(n = n())
is_numeric("A")
is.numeric("A")
!is.numeric("A")
data2 <- data %>%
select(Created.Date, Closed.Date, Agency, Complaint.Type, Descriptor,
Location.Type, Incident.Zip, City, Status, Borough, Latitude, Longitude, Location) %>%
filter(!is.na(Incident.Zip), is.numeric(Incident.Zip))
data2 %<>% mutate(Priority = if_else(Complaint.Type %in% c("HEAT/ HOT WATER", "UNSANITARY CONDITION",
"Water System", "Street Light Condition",
"PLUMBING", "WATER LEAK",
"Dirty Conditions", "Sanitation Condition",
"Sewer", "Electric",
"Rodent", "General Construction/Plumbing",
"Traffic Signal Condition", "Damaged Tree",
"Root/Sewer/Sidewalk Condition", "SAFETY",
"Elevator", "Air Quality",
"Construction", "Homeless Person Assistance",
"Indoor Air Quality", "Plumbing",
"Hazardous Materials", "Food Poisoning",
"Electrical", "Asbestos",
"Lead", "Water Quality",
"Indoor Sewage", "ELEVATOR",
"Elder Abuse", "Unsanitary Pigeon Condition",
"BEST/Site Safety", "Mold",
"Illegal Animal Kept as Pet", "Senior Center Complaint",
"Scaffold Safety", "Alzheimer's Care",
"Drinking Water", "Poision Ivy",
"Bridge Condition"), 1, 0))
# write.csv(data2, "Cleaned_data.csv")
k <- data2
k <- data2 %>% group_by(Incident.Zip, Priority) %>% summarize(n = n())
data2 <- data %>%
select(Created.Date, Closed.Date, Agency, Complaint.Type, Descriptor,
Location.Type, Incident.Zip, City, Status, Borough, Latitude, Longitude, Location) %>%
filter(!is.na(Incident.Zip) & is.numeric(Incident.Zip))
data %>% filter(is.numeric(Incident.Zip))
data2 <- data %>%
select(Created.Date, Closed.Date, Agency, Complaint.Type, Descriptor,
Location.Type, Incident.Zip, City, Status, Borough, Latitude, Longitude, Location) %>%
filter(!is.na(as.numeric(as.character(Incident.Zip))))
data2 %<>% mutate(Priority = if_else(Complaint.Type %in% c("HEAT/ HOT WATER", "UNSANITARY CONDITION",
"Water System", "Street Light Condition",
"PLUMBING", "WATER LEAK",
"Dirty Conditions", "Sanitation Condition",
"Sewer", "Electric",
"Rodent", "General Construction/Plumbing",
"Traffic Signal Condition", "Damaged Tree",
"Root/Sewer/Sidewalk Condition", "SAFETY",
"Elevator", "Air Quality",
"Construction", "Homeless Person Assistance",
"Indoor Air Quality", "Plumbing",
"Hazardous Materials", "Food Poisoning",
"Electrical", "Asbestos",
"Lead", "Water Quality",
"Indoor Sewage", "ELEVATOR",
"Elder Abuse", "Unsanitary Pigeon Condition",
"BEST/Site Safety", "Mold",
"Illegal Animal Kept as Pet", "Senior Center Complaint",
"Scaffold Safety", "Alzheimer's Care",
"Drinking Water", "Poision Ivy",
"Bridge Condition"), 1, 0))
# write.csv(data2, "Cleaned_data.csv")
k <- data2 %>% group_by(Incident.Zip, Priority) %>% summarize(n = n())
View(k)
k <- data2 %>% group_by(Incident.Zip, Agency) %>% summarize(n = n())
k <- data2 %>% group_by(Incident.Zip, Agency) %>% summarize(n = n()) %>% group_by(Incident.Zip)
View(k)
write.csv(data2, "Cleaned_data.csv")
barplot(k)
barplot(k$n)
hist(k$n)
k[1]
k[1,]
k[1,]...length()
k[1,].length()
k[1],
k[10,]
k[10,1]
k[10,1].length
length(k[10,1])
length(k[[10,1]])
install.packages("googleVis")
library(googleVis)
View(k)
View(data2)
gvisGeoChart(data2, Incident.Zip)
gvisGeoChart(data2, data2$Incident.Zip)
install.packages("leaflet")
View(k)
gvisGeoChart(k, "NYC")
k <- data2 %>% group_by(Incident.Zip, Priority) %>% tally()
library(tidyverse)
library(magrittr)
library(plotly)
k <- data2 %>% group_by(Incident.Zip, Priority) %>% tally()
View(k)
library(googleVis)
k <- data2 %>% group_by(Incident.Zip, Priority) %>% tally()
gvisGeoChart(k, "NYC")
library(tidyverse)
library(magrittr)
library(plotly)
library(broom)
library(sf)
url <- "http://data.beta.nyc//dataset/3bf5fb73-edb5-4b05-bb29-7c95f4a727fc/resource/6df127b1-6d04-4bb7-b983-07402a2c3f90/download/f4129d9aa6dd4281bc98d0f701629b76nyczipcodetabulationareas.geojson"
sf <- read_sf(url)
knitr::opts_chunk$set(echo = F, warning = F, message = F, collapse = T, cache = T)
library(tidyverse)
library(magrittr)
library(knitr)
library(corrplot)
library(kableExtra)
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, warning = F, message = F, collapse = T, cache = T)
setwd("~/GitHub/DATA_621/Homework 5")
# Chunk 2: load-libraries
library(tidyverse)
library(magrittr)
library(knitr)
library(corrplot)
library(kableExtra)
library(missForest)
library(doParallel)
# Chunk 3: import-dataset
wine.t <- read_csv("./data/wine-training-data.csv", na = "", col_types = cols(INDEX = col_skip()))
wine.e <- read_csv("./data/wine-evaluation-data.csv", na= "", col_types = cols(INDEX = col_skip()))
# Chunk 4: data-dictionary
defs <- c("Number of Cases Purchased",
"Proprietary method of testing total acidity of wine by using a weighted average",
"Alcohol Content",
"Chloride content of wine",
"Citric Acid Content",
"Density of Wine",
"Fixed Acidity of Wine",
"Sulfur Dioxide content of wine",
"Marketing Score indicating the appeal of label design for consumers. High numbers suggest customers like the label design. Negative numbers suggest customers don't like the design",
"pH of wine",
"Residual Sugar of wine",
"Wine rating by a team of experts. 4 Stars = Excellent, 1 Star = Poor",
"Sulfate conten of wine",
"Total Sulfur Dioxide of Wine",
"Volatile Acid content of wine"
)
wine.t <- wine.t[, c(names(wine.t)[1], sort(names(wine.t)[2:15]))]
wine.e <- wine.e[, c(names(wine.e)[1], sort(names(wine.e)[2:15]))]
wine.dict <- data.frame(names(wine.t), defs)
names(wine.dict) <- c("Variable Name", "Definition")
kable(wine.dict, format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 5: data-structure
kable(psych::describe(wine.t), format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 6: missing-data
colSums(is.na(wine.t))
# Chunk 7: glimpse-data
glimpse(wine.t)
# Chunk 8: summary-boxplot
wine.bp <- wine.t %>%
select(-TARGET) %>%
gather()
ggplot(wine.bp, aes(x = key, y = value)) +
labs(x = "variable", title = "Wine Data Training Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
theme(axis.text.x = element_text(angle = 90))
# Chunk 9: summary-histogram
ggplot(data = wine.bp, mapping = aes(x = value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
# Chunk 10: summary-correlation-heatmap
wine.c <- mutate_all(wine.t, funs(as.numeric)) %>%
na.omit(.)
corrplot(cor(wine.c), method = "color", type = "lower")
# Chunk 11: summary-correlation-table
corp <- apply(wine.t, 2, function(x) cor.test(x, y=wine.t$TARGET)$p.value)
cortable <- cor(wine.t, wine.t$TARGET, use = "complete.obs")
kable(cbind(as.character(corp), cortable), format = "latex", booktabs = T, col.names = c("P-value", "Correlation with response")) %>%
kable_styling(latex_options = c("striped"))
# Chunk 12: recode-variables
# Create copies to use for different models
winet2 <- wine.t
winee2 <- wine.e
# Copied training
winet2$AcidIndex <- factor(winet2$AcidIndex, levels = c(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
winet2$LabelAppeal <- factor(winet2$LabelAppeal, levels = c(-2, -1, 0, 1, 2))
winet2$STARS <- factor(winet2$STARS, levels = c(1, 2, 3, 4))
# Copied Evaluation
winee2$AcidIndex <- factor(winee2$AcidIndex, levels = c(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
winee2$LabelAppeal <- factor(winee2$LabelAppeal, levels = c(-2, -1, 0, 1, 2))
winee2$STARS <- factor(winee2$STARS, levels = c(1, 2, 3, 4))
cores = detectCores() - 1
registerDoParallel(cores = cores)
winet2 <- missForest(xmis = winet2,
maxiter = 10,
ntree = 100,
variablewise = T,
verbose = T,
parallelize = "forests")
winee2 <- missForest(xmis = winee2,
maxiter = 10,
ntree = 100,
variablewise = T,
verbose = T,
parallelize = "forests")
cores = detectCores() - 1
registerDoParallel(cores = cores)
winet2 <- missForest(xmis = data.frame(winet2),
maxiter = 10,
ntree = 100,
variablewise = T,
verbose = T,
parallelize = "forests")
>missForest()
?missForest
cores = detectCores() - 1
registerDoParallel(cores = cores)
winet2 <- missForest(xmis = data.frame(winet2),
maxiter = 10,
variablewise = T,
verbose = T,
parallelize = "forests")
install.packages("Hmisc")
winet2 <- aregImpute(data = winet2, n.impute = 5)
library(Hmisc)
winet2 <- aregImpute(data = winet2, n.impute = 5)
winet2$STARS[winet2$STARS == NA]
str(winet2$STARS)
sum(is.na(winet2$STARS))
winet2$STARS[is.na(winet2$STARS)] <- 0
# Create copies to use for different models
winet2 <- wine.t
winet2$STARS[is.na(winet2$STARS)] <- 0
# Create copies to use for different models
winet2 <- wine.t
winee2 <- wine.e
winet2$STARS[is.na(winet2$STARS)] <- 0
winee2$STARS[is.na(winee2$STARS)] <- 0
# Copied training
winet2$AcidIndex <- factor(winet2$AcidIndex, levels = c(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
winet2$LabelAppeal <- factor(winet2$LabelAppeal, levels = c(-2, -1, 0, 1, 2))
winet2$STARS <- factor(winet2$STARS, levels = c(0, 1, 2, 3, 4))
# Copied Evaluation
winee2$AcidIndex <- factor(winee2$AcidIndex, levels = c(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
winee2$LabelAppeal <- factor(winee2$LabelAppeal, levels = c(-2, -1, 0, 1, 2))
winee2$STARS <- factor(winee2$STARS, levels = c(0, 1, 2, 3, 4))
winet2 <- aregImpute(formula = ~Acohol + Chlorides + FreeSulfurDioxide + pH + ResidualSugar +
Sulphates + TotalSulfureDioxide, data = winet2, n.impute = 5)
winet2 <- aregImpute(formula = ~Alcohol + Chlorides + FreeSulfurDioxide + pH + ResidualSugar +
Sulphates + TotalSulfureDioxide, data = winet2, n.impute = 5)
winet2 <- aregImpute(formula = ~Alcohol + Chlorides + FreeSulfurDioxide + pH + ResidualSugar +
Sulphates + TotalSulfurDioxide, data = winet2, n.impute = 5)
View(winet2)
winet2
winet2$imputed$Alcohol
# Create copies to use for different models
winet2 <- wine.t
winee2 <- wine.e
winet2$STARS[is.na(winet2$STARS)] <- 0
winee2$STARS[is.na(winee2$STARS)] <- 0
# Copied training
winet2$AcidIndex <- factor(winet2$AcidIndex, levels = c(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
winet2$LabelAppeal <- factor(winet2$LabelAppeal, levels = c(-2, -1, 0, 1, 2))
winet2$STARS <- factor(winet2$STARS, levels = c(0, 1, 2, 3, 4))
# Copied Evaluation
winee2$AcidIndex <- factor(winee2$AcidIndex, levels = c(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
winee2$LabelAppeal <- factor(winee2$LabelAppeal, levels = c(-2, -1, 0, 1, 2))
winee2$STARS <- factor(winee2$STARS, levels = c(0, 1, 2, 3, 4))
trainingimpute <- aregImpute(formula = ~Alcohol + Chlorides + FreeSulfurDioxide + pH + ResidualSugar +
Sulphates + TotalSulfurDioxide, data = winet2, n.impute = 5)
any(is.na(winet2))
View(winet2)
trainingimpute
completed <- winet2
imputed <- impute.transcan(trainingimpute, imputation=1, data=train.mis, list.out=TRUE, pr=FALSE, check=FALSE)
completed[names(imputed)] <- imputed
completed
completed <- winet2
imputed <- impute.transcan(trainingimpute, imputation=1, data=winet2, list.out=TRUE, pr=FALSE, check=FALSE)
completed[names(imputed)] <- imputed
completed
evalimpute <- aregImpute(formula = ~Alcohol + Chlorides + FreeSulfurDioxide + pH + ResidualSugar +
Sulphates + TotalSulfurDioxide, data = winee2, n.impute = 5)
imputed.eval <- winee2
imputed <- impute.transcan(evalimpute, imputation=1, data=winee2, list.out=TRUE, pr=FALSE, check=FALSE)
imputed.eval[names(imputed)] <- imputed
rm(completed)
View(data2)
rm(data, data2)
rm(k)
rm(cores)
imputed.training <- winet2
imputed <- impute.transcan(trainingimpute, imputation=1, data=winet2, list.out=TRUE, pr=FALSE, check=FALSE)
imputed.training[names(imputed)] <- imputed
any(is.na(imputed.training))
pm1 <- glm(TARGET ~ ., data = wine.t, family = "poisson")
summary(pm1)
pm2 <- glm(TARGET ~ ., data = imputed.training, family = "poisson")
summary(pm2)
anova(pm1, pm2)
View(imputed.training)
hist(trainingimpute)
hist(trainingimpute$Alcohol)
hist(imputed.training)
hist(imputed.training$Density)
summary(pm2)
pm3 <- glm(TARGET ~ . -ResidualSugar -pH -FixedAcidity -Density -CitricAcid, data = imputed.training, family = "poisson")
summary(pm3)
anova(pm3, test = "chisq")
anova(pm3, test = "Chisq")
round(pm1$aic, 2)
round(pm2$aic, 2)
options(scipen = 3, digits = 6)
library(MASS)
nb1 <- glm.nb(formula = TARGET ~ ., data = wine.t)
summary(nb1)
str(nb1)
install.packages("pscl")
library(pscl)
zinb <- zeroinfl(TARGET ~ ., data = imputed.training)
summary(zinb)
zinb <- zeroinfl(TARGET ~ ., data = imputed.training, dist = "negbin")
summary(zinb)
zinb <- zeroinfl(TARGET ~ ., data = wine.t, dist = "negbin")
summary(zinb)
RMSE = function(m, o){
sqrt(mean((m - o)^2))
}
RMSE <- function(error) { sqrt(mean(error^2)) }
RMSE(zinb$residuals)
RMSE(nb1)
RMSE(nb1$residuals)
RMSE(nb2$residuals)
nb2 <- glm.nb(formula = TARGET ~ ., data = imputed.training)
summary(nb2)
RMSE(nb2$residuals)
RMSE(pm1$residuals)
RMSE(pm2$residuals)
RMSE(zinb$residuals)
zinb <- zeroinfl(TARGET ~ ., data = imputed.training, dist = "negbin")
RMSE(zinb$residuals)
lm1 <- lm(TARGET ~ ., data = wine.t)
summary(lm1)
lm2 <- lm(TARGET ~ ., data = imputed.training)
summary(lm2)
RMSE(nb1$residuals)
RMSE(nb2$residuals)
RMSE(lm1)
RMSE(lm2$residuals)
RMSE(zinb$residuals)
RMSE(lm1$residuals)
?predict
pred <- predict(zinb, newdata = imputed.eval, type = "response")
View(winet2)
pdf <- data.frame(ID = 1:nrow(pred), Predicted = pred)
pdf <- data.frame(ID = 1:NROW(pred), Predicted = pred)
View(pdf)
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, warning = F, message = F, collapse = T, cache = T)
options(scipen = 3, digits = 6)
setwd("~/GitHub/DATA_621/Homework 5")
# Chunk 2: load-libraries
library(MASS)
library(tidyverse)
library(magrittr)
library(knitr)
library(corrplot)
library(kableExtra)
library(Hmisc)
library(pscl)
# Chunk 3: import-dataset
wine.t <- read_csv("./data/wine-training-data.csv", na = "", col_types = cols(INDEX = col_skip()))
wine.e <- read_csv("./data/wine-evaluation-data.csv", na= "", col_types = cols(INDEX = col_skip()))
# Chunk 4: data-dictionary
defs <- c("Number of Cases Purchased",
"Proprietary method of testing total acidity of wine by using a weighted average",
"Alcohol Content",
"Chloride content of wine",
"Citric Acid Content",
"Density of Wine",
"Fixed Acidity of Wine",
"Sulfur Dioxide content of wine",
"Marketing Score indicating the appeal of label design for consumers. High numbers suggest customers like the label design. Negative numbers suggest customers don't like the design",
"pH of wine",
"Residual Sugar of wine",
"Wine rating by a team of experts. 4 Stars = Excellent, 1 Star = Poor",
"Sulfate conten of wine",
"Total Sulfur Dioxide of Wine",
"Volatile Acid content of wine"
)
wine.t <- wine.t[, c(names(wine.t)[1], sort(names(wine.t)[2:15]))]
wine.e <- wine.e[, c(names(wine.e)[1], sort(names(wine.e)[2:15]))]
wine.dict <- data.frame(names(wine.t), defs)
names(wine.dict) <- c("Variable Name", "Definition")
kable(wine.dict, format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 5: data-structure
kable(psych::describe(wine.t), format = "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Chunk 6: missing-data
colSums(is.na(wine.t))
# Chunk 7: glimpse-data
glimpse(wine.t)
# Chunk 8: summary-boxplot
wine.bp <- wine.t %>%
select(-TARGET) %>%
gather()
ggplot(wine.bp, aes(x = key, y = value)) +
labs(x = "variable", title = "Wine Data Training Boxplot") +
geom_boxplot(outlier.colour = "red", outlier.shape = 1) +
theme(axis.text.x = element_text(angle = 90))
# Chunk 9: summary-histogram
ggplot(data = wine.bp, mapping = aes(x = value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
# Chunk 10: summary-correlation-heatmap
wine.c <- mutate_all(wine.t, funs(as.numeric)) %>%
na.omit(.)
corrplot(cor(wine.c), method = "color", type = "lower")
# Chunk 11: summary-correlation-table
corp <- apply(wine.t, 2, function(x) cor.test(x, y=wine.t$TARGET)$p.value)
cortable <- cor(wine.t, wine.t$TARGET, use = "complete.obs")
kable(cbind(as.character(corp), cortable), format = "latex", booktabs = T, col.names = c("P-value", "Correlation with response")) %>%
kable_styling(latex_options = c("striped"))
# Chunk 12: recode-variables
# Create copies to use for different models
winet2 <- wine.t
winee2 <- wine.e
winet2$STARS[is.na(winet2$STARS)] <- 0
winee2$STARS[is.na(winee2$STARS)] <- 0
# Copied training
winet2$AcidIndex <- factor(winet2$AcidIndex, levels = c(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
winet2$LabelAppeal <- factor(winet2$LabelAppeal, levels = c(-2, -1, 0, 1, 2))
winet2$STARS <- factor(winet2$STARS, levels = c(0, 1, 2, 3, 4))
# Copied Evaluation
winee2$AcidIndex <- factor(winee2$AcidIndex, levels = c(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
winee2$LabelAppeal <- factor(winee2$LabelAppeal, levels = c(-2, -1, 0, 1, 2))
winee2$STARS <- factor(winee2$STARS, levels = c(0, 1, 2, 3, 4))
# Chunk 13: forest-imputation
trainingimpute <- aregImpute(formula = ~Alcohol + Chlorides + FreeSulfurDioxide + pH + ResidualSugar +
Sulphates + TotalSulfurDioxide, data = winet2, n.impute = 5, pr = F)
evalimpute <- aregImpute(formula = ~Alcohol + Chlorides + FreeSulfurDioxide + pH + ResidualSugar +
Sulphates + TotalSulfurDioxide, data = winee2, n.impute = 5, pr = F)
# Chunk 14: extract-data
imputed.training <- winet2
imputed <- impute.transcan(trainingimpute, imputation=1, data=winet2, list.out=TRUE, pr=FALSE, check=FALSE)
imputed.training[names(imputed)] <- imputed
imputed.eval <- winee2
imputed <- impute.transcan(evalimpute, imputation=1, data=winee2, list.out=TRUE, pr=FALSE, check=FALSE)
imputed.eval[names(imputed)] <- imputed
# Chunk 15: poisson-one
pm1 <- glm(TARGET ~ ., data = wine.t, family = "poisson")
summary(pm1)
# RMSE Function Adapted from
# https://stackoverflow.com/a/44167388/8877639
RMSE <- function(error) { sqrt(mean(error^2)) }
paste0("RMSE = ", RMSE(pm1$residuals))
# Chunk 16: poisson-two
pm2 <- glm(TARGET ~ ., data = imputed.training, family = "poisson")
summary(pm2)
paste0("RMSE = ", RMSE(pm2$residuals))
# Chunk 17: nb-model-one
nb1 <- glm.nb(formula = TARGET ~ ., data = wine.t)
summary(nb1)
paste0("RMSE = ", RMSE(nb1$residuals))
# Chunk 18: nb-model-two
nb2 <- glm.nb(formula = TARGET ~ ., data = imputed.training)
summary(nb2)
paste0("RMSE = ", RMSE(nb2$residuals))
# Chunk 19: zinfl-nb
zinb <- zeroinfl(TARGET ~ ., data = imputed.training, dist = "negbin")
summary(zinb)
paste0("RMSE = ", RMSE(zinb$residuals))
# Chunk 20: lm-one
lm1 <- lm(TARGET ~ ., data = wine.t)
summary(lm1)
# Chunk 21: lm-two
lm2 <- lm(TARGET ~ ., data = imputed.training)
summary(lm2)
pred <- predict(zinb, newdata = imputed.eval, type = "response")
pdf <- data.frame(ID = 1:NROW(pred), Predicted = pred)
head(pdf, 10)
rm(cortable, evalimpute, imputed, lm1, lm2, pm1, pm2, pm3, trainingimpute, wine.bp, wine.c, winee2, winet2)
gc()
View(pdf)
